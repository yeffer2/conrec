package pe.com.bbva.reniec.utileria;

import org.apache.commons.lang.StringUtils;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.terminal.StreamResource;
import com.vaadin.terminal.gwt.server.WebApplicationContext;
import com.vaadin.terminal.gwt.server.WebBrowser;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Label;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Window;
import com.vaadin.ui.Button.ClickEvent;

public class AlertDialog extends Window implements ClickListener {

	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private VerticalLayout pnlResultado;
	@AutoGenerated
	private Button btnAlerta;
	@AutoGenerated
	private Label lblContenido;
	
	private AlertDialogEvent alertDialogEvent;
	
	private StreamResource resource;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */
	
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public AlertDialog() {
		buildMainLayout();
		addComponent(mainLayout);
		final Window window=this;
		window.setModal(true);
		window.setClosable(false);
		window.setResizable(false);
		lblContenido.setContentMode(Label.CONTENT_XHTML);
		btnAlerta.addListener(this);
		window.setWidth("600px");
		window.setHeight("-1.0");
		mainLayout.setWidth("560px");
		pnlResultado.setWidth("560px");
		lblContenido.setWidth("100%");
	}
	
	public AlertDialog(String caption, String contenido, String boton, String width, StreamResource resource) {
		this(caption, contenido, boton, width);
		this.resource = resource;
		
	}
	
	@Override
	public void attach() {
		super.attach();
		if(resource != null)
		{
			WebApplicationContext context = ((WebApplicationContext) getApplication().getContext());
	        WebBrowser webBrowser = context.getBrowser();
	        if(webBrowser.isIE()){
	        	getApplication().getMainWindow().open(resource,"_blank");
			}else{
				getApplication().getMainWindow().open(resource);
			}
		}
	}
	
	public AlertDialog(String caption, String contenido, String boton, String width) {
		buildMainLayout();
		addComponent(mainLayout);
		setContenido(contenido);
		setBoton(boton);
		final Window window=this;
		window.setModal(true);
		window.setClosable(false);
		window.setResizable(false);
		lblContenido.setContentMode(Label.CONTENT_XHTML);
		btnAlerta.addListener(this);
		window.setCaption(caption);
		window.setWidth(width);
		window.setHeight("-1.0");
		lblContenido.setWidth("100%");
	}

	@Override
	public void setWidth(String width) {
		// TODO Auto-generated method stub
		super.setWidth(width);
		if(StringUtils.isNumeric(width)){
			Integer widthInt=Integer.parseInt(width);
			widthInt=widthInt-40;
			mainLayout.setWidth(widthInt.toString());
			pnlResultado.setWidth(widthInt.toString());
		}else if(StringUtils.isNumeric(width.substring(0, width.length()-1))){
			Integer widthInt=Integer.parseInt(width.substring(0, width.length()-1));
			widthInt=widthInt-40;
			mainLayout.setWidth(widthInt.toString()+width.substring(width.length()-1));
			pnlResultado.setWidth(widthInt.toString()+width.substring(width.length()-1));
		}else if(StringUtils.isNumeric(width.substring(0, width.length()-2))){
			Integer widthInt=Integer.parseInt(width.substring(0, width.length()-2));
			widthInt=widthInt-40;
			mainLayout.setWidth(widthInt.toString()+width.substring(width.length()-2));
			pnlResultado.setWidth(widthInt.toString()+width.substring(width.length()-2));
		}
	}

	public void setContenido(String contenido) {
		lblContenido.setValue(contenido);
	}

	public void setBoton(String boton) {
		btnAlerta.setCaption(boton);
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// pnlResultado
		pnlResultado = buildPnlResultado();
		mainLayout.addComponent(pnlResultado);
		
		return mainLayout;
	}

	@AutoGenerated
	private VerticalLayout buildPnlResultado() {
		// common part: create layout
		pnlResultado = new VerticalLayout();
		pnlResultado.setImmediate(false);
		pnlResultado.setWidth("-1px");
		pnlResultado.setHeight("-1px");
		pnlResultado.setMargin(false);
		pnlResultado.setSpacing(true);
		
		// lblContenido
		lblContenido = new Label();
		lblContenido.setImmediate(false);
		lblContenido.setWidth("-1px");
		lblContenido.setHeight("-1px");
		lblContenido.setValue("Label");
		pnlResultado.addComponent(lblContenido);
		
		// btnAlerta
		btnAlerta = new Button();
		btnAlerta.setCaption("Aceptar");
		btnAlerta.setImmediate(false);
		btnAlerta.setWidth("-1px");
		btnAlerta.setHeight("-1px");
		pnlResultado.addComponent(btnAlerta);
		pnlResultado.setComponentAlignment(btnAlerta, Alignment.TOP_CENTER);
		
		return pnlResultado;
	}

	@Override
	public void buttonClick(ClickEvent event) {
		Window windowHarec=(Window)getParent();
		windowHarec.getWindow().removeWindow(this);
		if(alertDialogEvent != null)
		{
			alertDialogEvent.post(event);
		}
	}
	
	public interface AlertDialogEvent
	{
		void post(ClickEvent event);
	}

	public AlertDialogEvent getAlertDialogEvent() {
		return alertDialogEvent;
	}

	public void setAlertDialogEvent(AlertDialogEvent alertDialogEvent) {
		this.alertDialogEvent = alertDialogEvent;
	}

}


