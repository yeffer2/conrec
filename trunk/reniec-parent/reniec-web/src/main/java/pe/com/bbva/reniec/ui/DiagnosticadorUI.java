package pe.com.bbva.reniec.ui;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.Statement;
import java.util.logging.Logger;

import pe.com.bbva.reniec.utileria.Conexion;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Item;
import com.vaadin.data.util.IndexedContainer;
import com.vaadin.event.FieldEvents.TextChangeEvent;
import com.vaadin.event.FieldEvents.TextChangeListener;
import com.vaadin.event.ShortcutAction;
import com.vaadin.event.ShortcutAction.KeyCode;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.Panel;
import com.vaadin.ui.TabSheet;
import com.vaadin.ui.Table;
import com.vaadin.ui.TextArea;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Window.Notification;

@SuppressWarnings("serial")
public class DiagnosticadorUI extends CustomComponent implements
		TextChangeListener, ClickListener {

	Logger log = Logger.getLogger(DiagnosticadorUI.class.getName());
	
	@AutoGenerated
	private VerticalLayout mainLayout;

	@AutoGenerated
	private VerticalLayout vLayoutContenido;

	@AutoGenerated
	private VerticalLayout pnlScriptResultado;

	@AutoGenerated
	private VerticalLayout vLayoutSeparador;

	@AutoGenerated
	private VerticalLayout vLayoutIngreso;
	
	@AutoGenerated
	private VerticalLayout vLayoutConsulta;

	@AutoGenerated
	private VerticalLayout vLayoutResultado;
	
	@AutoGenerated
	private Panel vLayoutResultadoTab;
	
	@AutoGenerated
	private VerticalLayout vLayoutMensajeInferior;
	
	@AutoGenerated
	private VerticalLayout vLayoutPanelConsultaBase;

	@AutoGenerated
	private HorizontalLayout pnlScriptIngreso;

	@AutoGenerated
	private HorizontalLayout hLayout;

	@AutoGenerated
	private Table tblResultados;
	
	@AutoGenerated
	private Table tblResultadosTab;
	
	@AutoGenerated
	private Button btnEjecutar;

	@AutoGenerated
	private Label lblResultados;
	
	@AutoGenerated
	private Label lblResultadosTab;
	
	@AutoGenerated
	private Label lblSentencia;
	
	@AutoGenerated
	private TextField txtSentencia;
	
	@AutoGenerated
	private TabSheet tabResultado;
	
	@AutoGenerated
	private Button btnConsultar;

	@AutoGenerated
	private TextArea txtScriptIngreso;
	
	@AutoGenerated
	private Button btnMostrarSentencia;

	@AutoGenerated
	private VerticalLayout pnlOpciones;
	
	private static final String SENTENCIA_INICIAL = "select * from reniec.ctl_consultante where identificador in (";

	public DiagnosticadorUI() {
		buildMainLayout();
		setCompositionRoot(mainLayout);
		postConstruct();
	}

	public void postConstruct() {
		btnEjecutar.addListener((ClickListener) this);
		btnConsultar.addListener((ClickListener) this);
		btnMostrarSentencia.addListener((ClickListener) this);
	}
	
	private Button buildButtonMostrarSentencia(){
		btnMostrarSentencia = new Button();
		btnMostrarSentencia.setCaption("");
		btnMostrarSentencia.setImmediate(false);
		btnMostrarSentencia.setWidth("0px"); //0 
		btnMostrarSentencia.setHeight("0px");
		btnMostrarSentencia.setClickShortcut(KeyCode.Q, ShortcutAction.ModifierKey.CTRL);
		btnMostrarSentencia.addListener((ClickListener) this);
		return btnMostrarSentencia;
	}
	
	public VerticalLayout buildMainLayout() {
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);

		setWidth("100.0%");
		setHeight("100.0%");

		pnlOpciones = buildPanelOpciones();
		mainLayout.addComponent(pnlOpciones);

		return mainLayout;
	}

	public VerticalLayout buildPanelOpciones() {
		pnlOpciones = new VerticalLayout();
		pnlOpciones.setImmediate(false);
		pnlOpciones.setHeight("100.0%");
		pnlOpciones.setWidth("100.0%");

		vLayoutContenido = buildVerticalLayoutContenido();
		/*vLayoutMensaje = buildVerticalLayoutMensaje();*/

		/*pnlOpciones.addComponent(vLayoutMensaje);*/
		pnlOpciones.addComponent(vLayoutContenido);

		return pnlOpciones;
	}

	private VerticalLayout buildVerticalLayoutContenido() {
		vLayoutContenido = new VerticalLayout();
		vLayoutContenido.setImmediate(false);
		vLayoutContenido.setWidth("100.0%");
		vLayoutContenido.setHeight("-1px");
		vLayoutContenido.setMargin(false);
		vLayoutContenido.setSpacing(true);

		vLayoutConsulta = buildVerticalLayoutConsulta();
		vLayoutIngreso = buildVerticalLayoutIngreso();
		vLayoutSeparador = buildVerticalLayoutSeparador();
//		pnlScriptResultado = buildPanelScriptResultado();
//		vLayoutMensajeInferior = builVerticalLayoutAvisoInferior();
//		vLayoutResultadoTab = buildVerticalLayoutResultadoTab();
		vLayoutResultado = buildVerticalLayoutResultado();
		btnMostrarSentencia = buildButtonMostrarSentencia();
		vLayoutPanelConsultaBase = buildVerticalLayoutConsultaBase();
		
		vLayoutContenido.addComponent(vLayoutConsulta);
		vLayoutContenido.addComponent(vLayoutPanelConsultaBase);
		vLayoutContenido.addComponent(vLayoutIngreso);
		vLayoutContenido.addComponent(vLayoutSeparador);
		vLayoutContenido.addComponent(btnMostrarSentencia);
//		vLayoutContenido.addComponent(vLayoutResultadoTab);
		vLayoutContenido.addComponent(vLayoutResultado);
//		vLayoutContenido.addComponent(pnlScriptResultado);
//		vLayoutContenido.addComponent(vLayoutMensajeInferior);

		return vLayoutContenido;
	}

	private VerticalLayout buildVerticalLayoutIngreso() {
		vLayoutIngreso = new VerticalLayout();
		vLayoutIngreso.setImmediate(false);
		vLayoutIngreso.setWidth("100.0%");
		vLayoutIngreso.setHeight("-1px");
		vLayoutIngreso.setMargin(false);
		vLayoutIngreso.setSpacing(true);
		vLayoutIngreso.setVisible(false);

		hLayout = buildHorizontalLayoutTextArea();
		vLayoutIngreso.addComponent(hLayout);
		return vLayoutIngreso;
	}
	
	private VerticalLayout buildVerticalLayoutConsulta(){
		vLayoutConsulta = new VerticalLayout();
		vLayoutConsulta.setImmediate(false);
		vLayoutConsulta.setWidth("100.0%");
		vLayoutConsulta.setHeight("-1px");
		vLayoutConsulta.setMargin(false);
		vLayoutConsulta.setSpacing(true);
		
		hLayout = buildHorizontalLayoutConsulta();
		vLayoutConsulta.addComponent(hLayout);
		return vLayoutConsulta;
	}

	private HorizontalLayout buildHorizontalLayoutTextArea() {
		hLayout = new HorizontalLayout();
		hLayout.setImmediate(false);
		hLayout.setWidth("780px");
		hLayout.setHeight("-1px");
		hLayout.setMargin(false);
		hLayout.setSpacing(true);

		txtScriptIngreso = new TextArea();
		txtScriptIngreso.setImmediate(true);
		txtScriptIngreso.setWidth("700px");
		txtScriptIngreso.setHeight("120px");
		hLayout.addComponent(txtScriptIngreso);
		
		btnEjecutar = new Button();
		btnEjecutar.setCaption("Ejecutar");
		btnEjecutar.setImmediate(true);
		btnEjecutar.setWidth("-1px");
		btnEjecutar.setHeight("-1px");
		hLayout.addComponent(btnEjecutar);
		
		return hLayout;
	}
	
	private HorizontalLayout buildHorizontalLayoutConsulta(){
		hLayout = new HorizontalLayout();
		hLayout.setImmediate(false);
		hLayout.setWidth("-1px");
		hLayout.setHeight("-1px");
		hLayout.setMargin(false);
		hLayout.setSpacing(true);
		
		lblSentencia = obtenerEtiquetaSentencia(SENTENCIA_INICIAL);
		hLayout.addComponent(lblSentencia);
		
		txtSentencia = new TextField();
		txtSentencia.setImmediate(true);
		txtSentencia.setWidth("250px");
		txtSentencia.setHeight("-1px");
		hLayout.addComponent(txtSentencia);
		
		lblSentencia = obtenerEtiquetaSentencia(")");
		hLayout.addComponent(lblSentencia);
		
		btnConsultar = new Button();
		btnConsultar.setCaption("Consultar");
		btnConsultar.setImmediate(true);
		btnConsultar.setWidth("-1px");
		btnConsultar.setHeight("-1px");
		hLayout.addComponent(btnConsultar);
		
		return hLayout;
	}
	
	private Label obtenerEtiquetaSentencia(String caption){
		lblSentencia = new Label();
		lblSentencia.setImmediate(false);
		lblSentencia.setWidth("-1px");
		lblSentencia.setHeight("-1px");
		lblSentencia.setValue(caption);
		return lblSentencia;
	}

	private VerticalLayout buildVerticalLayoutSeparador() {
		vLayoutSeparador = new VerticalLayout();
		vLayoutSeparador.setImmediate(false);
		vLayoutSeparador.setWidth("100.0%");
		vLayoutSeparador.setHeight("25px");
		vLayoutSeparador.setMargin(false);
		vLayoutSeparador.setSpacing(true);
		return vLayoutSeparador;
	}

	private VerticalLayout buildPanelScriptResultado() {
		pnlScriptResultado = new VerticalLayout();
		pnlScriptResultado.setWidth("100.0%");
		pnlScriptResultado.setHeight("-1px");
		pnlScriptResultado.setImmediate(false);
		pnlScriptResultado.setMargin(false);
		pnlScriptResultado.setSpacing(true);
		
		tblResultadosTab = obtenerTabla();
		pnlScriptResultado.addComponent(tblResultadosTab);

		return pnlScriptResultado;
	}
	
	private VerticalLayout buildVerticalLayoutResultado(){
		vLayoutResultado = new VerticalLayout();
		vLayoutResultado.setWidth("100.0%");
		vLayoutResultado.setHeight("-1px");
		vLayoutResultado.setImmediate(false);
		vLayoutResultado.setMargin(false);
		vLayoutResultado.setSpacing(true);
		vLayoutResultado.setVisible(false);
		
		tabResultado = buildTabResultado();
		vLayoutResultado.addComponent(tabResultado);
		
		return vLayoutResultado;
	}
	
	private Panel buildVerticalLayoutResultadoTab(){
		vLayoutResultadoTab = new Panel();
		vLayoutResultadoTab.setWidth("100.0%");
		vLayoutResultadoTab.setHeight("-1px");
		vLayoutResultadoTab.setImmediate(false);
		vLayoutResultadoTab.setVisible(false);
		
		pnlScriptResultado = buildPanelScriptResultado();
		vLayoutResultadoTab.addComponent(pnlScriptResultado);
		
		vLayoutMensajeInferior = builVerticalLayoutAvisoInferior();
		vLayoutResultadoTab.addComponent(vLayoutMensajeInferior);
		
		return vLayoutResultadoTab;
	}
	
	private VerticalLayout buildVerticalLayoutConsultaBase(){
		vLayoutPanelConsultaBase = new VerticalLayout();
		vLayoutPanelConsultaBase.setWidth("100.0%");
		vLayoutPanelConsultaBase.setHeight("-1px");
		vLayoutPanelConsultaBase.setImmediate(false);
		vLayoutPanelConsultaBase.setMargin(false);
		vLayoutPanelConsultaBase.setSpacing(true);
		vLayoutPanelConsultaBase.setVisible(false);
		
		tblResultados = new Table();
		tblResultados.setImmediate(false);
		tblResultados.setSizeUndefined();
		tblResultados.setHeight("100.0%");
		tblResultados.setWidth("100.0%");
		tblResultados.setNullSelectionAllowed(true);
		tblResultados.setNullSelectionItemId(null);
		tblResultados.setSelectable(true);
		vLayoutPanelConsultaBase.addComponent(tblResultados);
		
		lblResultados = new Label();
		lblResultados.setImmediate(false);
		lblResultados.setWidth("-1px");
		lblResultados.setHeight("-1px");
		lblResultados.setValue("");
		vLayoutPanelConsultaBase.addComponent(lblResultados);
		vLayoutPanelConsultaBase.setComponentAlignment(lblResultados,
				Alignment.TOP_LEFT);
		
		return vLayoutPanelConsultaBase;
	}
	
	private TabSheet buildTabResultado() {
		tabResultado = new TabSheet();
		tabResultado.setImmediate(false);
		tabResultado.setWidth("100.0%");
		tabResultado.setHeight("100.0%");
		return tabResultado;
	}
	
	private Table obtenerTabla(){
		tblResultadosTab = new Table();
		tblResultadosTab.setImmediate(false);
		tblResultadosTab.setSizeUndefined();
		tblResultadosTab.setHeight("100.0%");
		tblResultadosTab.setWidth("100.0%");
		tblResultadosTab.setNullSelectionAllowed(true);
		tblResultadosTab.setNullSelectionItemId(null);
//		tblResultados.setVisible(false);
		tblResultadosTab.setSelectable(true);
		return tblResultadosTab;
	}

	private VerticalLayout builVerticalLayoutAvisoInferior() {
		vLayoutMensajeInferior = new VerticalLayout();
		vLayoutMensajeInferior.setImmediate(false);
		vLayoutMensajeInferior.setWidth("100.0%");
		vLayoutMensajeInferior.setHeight("25px");
		vLayoutMensajeInferior.setMargin(false);
		vLayoutMensajeInferior.setSpacing(true);

		lblResultadosTab = new Label();
		lblResultadosTab.setImmediate(false);
		lblResultadosTab.setWidth("-1px");
		lblResultadosTab.setHeight("-1px");
		lblResultadosTab.setValue("");
		vLayoutMensajeInferior.addComponent(lblResultadosTab);
		vLayoutMensajeInferior.setComponentAlignment(lblResultadosTab,
				Alignment.TOP_LEFT);

		return vLayoutMensajeInferior;
	}

	public void buttonClick(ClickEvent event) {
		if (event.getButton().equals(btnEjecutar)) {
			ejecutar();
		}
		if (event.getButton().equals(btnMostrarSentencia)) {
			mostrarDiagnosticador();
		}
		if (event.getButton().equals(btnConsultar)) {
			consultar();
		}
	}
	
	private void consultar(){
		Object valor = txtSentencia.getValue();
		if(valor==null){
			getWindow().showNotification("Por favor ingresar los identificadores de consultante que desea consultar", 
											Notification.TYPE_ERROR_MESSAGE);
			return;
		}
		limpiarTabla(true);
		String sentencia = SENTENCIA_INICIAL + valor.toString() + ")";
		Connection con=null;
		Statement st=null;
		ResultSet rs=null;
		
		try {
			con = Conexion.getConnection();
			st = con.createStatement();
			rs = st.executeQuery(sentencia);
			
			ResultSetMetaData rsmd = rs.getMetaData();
			int numeroColumnas = rsmd.getColumnCount();
			
			IndexedContainer container = new IndexedContainer();
			String[] nombreColumnas = new String[numeroColumnas];
			int[] tamanioColumna = new int[numeroColumnas];

			for (int i = 1; i <= numeroColumnas; i++) {
				container
						.addContainerProperty(i + "-" + rsmd.getTableName(i)
								+ rsmd.getColumnName(i),
								obtenerTipoClase(rsmd
										.getColumnTypeName(i)),
								null);

				nombreColumnas[i - 1] = i + "-" + rsmd.getColumnName(i);
				tamanioColumna[i - 1] = rsmd
						.getColumnDisplaySize(i);
			}

			int cont = 1;
			int conta = 0;
			int cantidadFilas = 0;
			while (rs.next()) {
				Item item = container.addItem(cont++);
				while (conta < numeroColumnas) {
					item.getItemProperty(nombreColumnas[conta])
							.setValue(
									rs.getString(conta+1));
					conta++;
				}
				conta = 0;
				cantidadFilas++;
			}
			tblResultados.setContainerDataSource(container);
			tblResultados.setVisibleColumns(nombreColumnas);
			int contNombre = 0;
			String header = null;
			while (contNombre < numeroColumnas) {
				header = nombreColumnas[contNombre];
				tblResultados.setColumnHeader(
						nombreColumnas[contNombre],
						header.substring(header.indexOf("-") + 1, header.length()));
				contNombre++;
			}
			lblResultados.setValue(cantidadFilas + " filas seleccionadas.");
			
		} catch (Exception e) {
			log.warning("+++ ERROR: " + e.getMessage());
			mostrarErrorConsultaBase(e);
		}
	}
	
	private void ejecutar(){
		Connection con=null;
		Statement st=null;
		ResultSet rs=null;
		
		String query = "";
		query = txtScriptIngreso.getValue().toString().trim();
		
		Integer contadorConsulta = 0;
		String[] asql = null;
		tabResultado.removeAllComponents();
		lblResultados.setValue("");
		if (query.length() > 0) {
			try {
				con = Conexion.getConnection();
				asql = query.split(";");
				
				if(asql.length==0){
					asql = new String[1];
				}
				
				String tipoAccion = null;

				for(int z=0; z<asql.length; z++){
					
					tipoAccion = asql[z].substring(0, 7).toUpperCase().trim();

					if(tipoAccion.indexOf("SELECT")!=-1){
						try {
							st = con.createStatement();
							rs = st.executeQuery(asql[z]);
							contadorConsulta++;

							ResultSetMetaData rsmd = rs.getMetaData();
							int numeroColumnas = rsmd.getColumnCount();
							
//							limpiarTablaTab(true);
	
							IndexedContainer container = new IndexedContainer();
							String[] nombreColumnas = new String[numeroColumnas];
							int[] tamanioColumna = new int[numeroColumnas];
	
							for (int i = 1; i <= numeroColumnas; i++) {
								container
										.addContainerProperty(i + "-" + rsmd.getTableName(i)
												+ rsmd.getColumnName(i),
												obtenerTipoClase(rsmd
														.getColumnTypeName(i)),
												null);
	
								nombreColumnas[i - 1] = i + "-" + rsmd.getColumnName(i);
								tamanioColumna[i - 1] = rsmd
										.getColumnDisplaySize(i);
							}

							int cont = 1;
							int conta = 0;
							int cantidadFilas = 0;
							while (rs.next()) {
								Item item = container.addItem(cont++);
								while (conta < numeroColumnas) {
									item.getItemProperty(nombreColumnas[conta])
											.setValue(
													rs.getString(conta+1));
//													rs.getString(nombreColumnas[conta]));
									conta++;
								}
								conta = 0;
								cantidadFilas++;
							}

							agregarTab(contadorConsulta);
							tblResultadosTab.setContainerDataSource(container);
							tblResultadosTab.setVisibleColumns(nombreColumnas);
							int contNombre = 0;
							String header = null;
							while (contNombre < numeroColumnas) {
								header = nombreColumnas[contNombre];
								tblResultadosTab.setColumnHeader(
										nombreColumnas[contNombre],
										header.substring(header.indexOf("-") + 1, header.length()));
								contNombre++;
							}
							lblResultadosTab.setValue(cantidadFilas
									+ " filas seleccionadas.");
							} catch (Exception ex) {
								log.warning("+++ ERROR: " + ex.getMessage());
								limpiarTablaTab(true);
								mostrarError(ex);
							}
					} else {
						st = con.createStatement();
						try {
//							st.executeUpdate(query);
							st.executeUpdate(asql[z]);
							limpiarTablaTab(false);
							vLayoutPanelConsultaBase.setVisible(true);
							tblResultados.setVisible(false);
							lblResultados.setValue("Ejecutado correctamente.");
						} catch (Exception e) {
							log.warning("+++ ERROR: " + e.getMessage());
							mostrarError(e);
						}
					}
				}
			} catch (Exception e) {
				log.warning("+++ ERROR: " + e.getMessage());
				mostrarError(e);
				e.printStackTrace();
			}finally{
				Conexion.close(con, st, rs);
			}
		}
	}
	
	private void agregarTab(Integer contador){
		String caption = "Sentencia " + contador;
		vLayoutResultadoTab = buildVerticalLayoutResultadoTab();
		vLayoutResultadoTab.setVisible(true);
		tblResultadosTab.setVisible(true);
		tabResultado.addTab(vLayoutResultadoTab, caption, null);
		tabResultado.setVisible(true);
		vLayoutResultado.setVisible(true);
	}
	
	private void limpiarTablaTab(boolean flag) {
		if(tblResultadosTab!=null){
			tblResultadosTab.removeAllItems();
			tblResultadosTab.setVisible(flag);
		}
		if(tabResultado!=null){
			tabResultado.removeAllComponents();
			tabResultado.setVisible(flag);
		}
		if(!flag && vLayoutResultadoTab!=null)vLayoutResultadoTab.removeAllComponents();
	}
	
	private void limpiarTabla(boolean flag) {
		vLayoutPanelConsultaBase.setVisible(flag);
		tblResultados.removeAllItems();
		tblResultados.setVisible(flag);
		lblResultados.setValue("");
		if(vLayoutResultadoTab!=null){
			vLayoutResultadoTab.setVisible(false);
			vLayoutIngreso.setVisible(false);
			txtScriptIngreso.setValue("");
			tabResultado.removeAllComponents();
			tabResultado.setVisible(false);
		}
	}
	
	private void mostrarError(Exception e){
		String error = e.getMessage();
		lblResultadosTab.setValue(error);
	}

	private void mostrarErrorConsultaBase(Exception e){
		String error = e.getMessage();
		lblResultados.setValue(error);
		e.printStackTrace();
	}
	
	@SuppressWarnings("rawtypes")
	private Class obtenerTipoClase(String tipo) {
		Class clase = null;
		try {
			clase = Class.forName("java.lang.String");
			if (tipo.equals("NUMBER")) {
				clase = Class.forName("java.lang.Long");
			} else if (tipo.equals("VARCHAR2") || tipo.equals("NVARCHAR2")) {
				clase = Class.forName("java.lang.String");
			} else if (tipo.equals("TIMESTAMP")) {
				clase = Class.forName("java.lang.String");
			} else {
				clase = Class.forName("java.lang.String");
			}
		} catch (Exception e) {
			log.warning("+++ ERROR: " + e.getMessage());
		}
		return clase;
	}

	public void textChange(TextChangeEvent event) {

	}

	private void mostrarDiagnosticador(){
		if(vLayoutIngreso.isVisible()){
			limpiarTabla(false);
			vLayoutIngreso.setVisible(false);
			if(vLayoutResultadoTab!=null) vLayoutResultadoTab.setVisible(false);
		}else{
			vLayoutPanelConsultaBase.setVisible(false);
			vLayoutIngreso.setVisible(true);
			if(vLayoutResultadoTab!=null) vLayoutResultadoTab.setVisible(true);
		}
	}
}
